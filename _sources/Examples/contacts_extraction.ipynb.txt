{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from CoDIAC import contactMap as cm\n",
    "from CoDIAC import PDBHelper \n",
    "from CoDIAC import pTyrLigand_helpers as pTyr_helpers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DOMAIN-DOMAIN CONTACT INTERFACE EXTRACTION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 1: Fetching data from PDB reference file for a PDB examined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "PATH = './Data/Adjacency_files/' #this is where you can find the adjacency files\n",
    "ann_file = './Data/PDB_Reference/SH2_IPR000980_PDB_reference.csv' #this is the annotation file\n",
    "PDB_ID = '4JGH' #SOCS family protein\n",
    "\n",
    "ann = pd.read_csv(ann_file)\n",
    "entities = PDBHelper.PDBEntitiesClass(ann, PDB_ID)\n",
    "entity =1 #there's only one entity in this example\n",
    "pdbClass = entities.pdb_dict[entity] #this holds information about the protein crystalized, such as domains\n",
    "chain_A = cm.chainMap(PDB_ID, entity)\n",
    "chain_A.construct(PATH)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "struct sequence: HMDPEFQAARLAKALRELGQTGWYWGSMTVNEAKEKLKEAPEGTFLIRDSSHSDYLLTISVKTSAGPTNLRIEYQDGKFRLDSIICVKSKLKQFDSVVHLIDYYVQMCKD----------GTVHLYLTKPLYTSAPSLQHLCRLTINKCTGAIWGLPLPTRLKDYLEEYKFQV\n",
      "minimum residue number: 26\n",
      "length of residues in seq: 173\n",
      "residue array size: (173, 173)\n",
      "unmodelled residues list: [136, 145]\n"
     ]
    }
   ],
   "source": [
    "print('struct sequence:', chain_A.structSeq)\n",
    "print('minimum residue number:', chain_A.return_min_residue())\n",
    "print('length of residues in seq:', len(chain_A.resNums))\n",
    "print('residue array size:', chain_A.arr.shape)\n",
    "print('unmodelled residues list:',chain_A.unmodeled_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QAARLAKALRELGQTGWYWGSMTVNEAKEKLKEAPEGTFLIRDSSHSDYLLTISVKTSAGPTNLRIEYQDGKFRLDSIICVKSKLKQFDSVVHLIDYYVQMCKDKRTGPEAPRNGTVHLYLTKPLYTSAPSLQHLCRLTINKCTGAIWGLPLPTRLKDYLEEYKFQV\n",
      "32\n",
      "167\n"
     ]
    }
   ],
   "source": [
    "print(pdbClass.ref_seq_mutated)\n",
    "print(pdbClass.ref_seq_positions[0])\n",
    "print(len(pdbClass.ref_seq_mutated))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP2: Create an entity specific class to align structure to reference sequence positions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Deleting 6 amino acids\n",
      "Adding 1 c-terminal gaps\n"
     ]
    }
   ],
   "source": [
    "chain_A_aligned = cm.translate_chainMap_to_RefSeq(chain_A, pdbClass) #class created to align structure to reference sequence positions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: {'SH2': [46, 156, 0, 0]}, 1: {'SOCS_box': [151, 197, 0, 0]}}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#These are the domains that are available in the structure for analysis\n",
    "pdbClass.domains"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 3: Identify domain boundaries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "ROI_1 = [46, 156] #SH2 domain \n",
    "ROI_2 = [151, 197] #socsbox domain\n",
    "fastaHeader = 'SH2|SOCS_box'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 4: Generate fasta/feature files for jalview visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "chain_A_aligned.print_fasta_feature_files(ROI_1[0],0, ROI_1[1], -1,ROI_2[0], 0,ROI_2[1],-1, 'O14508|SOCS2|1|46|156', 'SOCS_box', \n",
    "                                         './Data/Feature_Fasta_files/SH2_interdomain_4JGH', append=False, use_ref_seq_aligned=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#another visualization of contacts between regions of interest\n",
    "chain_A_aligned.generateAnnotatedHeatMap(ROI_2[0], ROI_2[1], ROI_1[0], ROI_1[1], remove_no_contacts=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LIGAND INTERFACE CONTACT EXTRACTION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 1:Identity PTMS from PDB reference file for a specific PDB "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "main = pd.read_csv(ann_file)\n",
    "PDB_ID='3TL0'\n",
    "for name, group in main.groupby('PDB_ID'):\n",
    "\n",
    "    for index, row in group.iterrows():\n",
    "        if name == PDB_ID:\n",
    "            modification_from_PDB = (row['modifications'])\n",
    "            if isinstance(row['modifications'],str): #PTM dictionary\n",
    "                transDict = PDBHelper.return_PTM_dict(modification_from_PDB) #dictionary with ptm information from PDB reference file\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{4: 'PTR'}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transDict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 2: Generate single dictionary of contact map for each entity in the structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "Adding 1 n_term positions\n",
      "Adding 2 c-terminal gaps\n",
      "6\n",
      "Adding 4 n_term positions\n",
      "Adding 3 c-terminal gaps\n"
     ]
    }
   ],
   "source": [
    "lig_entity = 2\n",
    "SH2_entity = 1\n",
    "dict_of_lig = cm.return_single_chain_dict(main, PDB_ID, PATH, lig_entity)\n",
    "dict_of_SH2 = cm.return_single_chain_dict(main, PDB_ID, PATH, SH2_entity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'entity': 2,\n",
       " 'PDB_ID': '3TL0',\n",
       " 'pdb_class': <CoDIAC.PDBHelper.PDBClass at 0x7fd119898310>,\n",
       " 'cm': <CoDIAC.contactMap.chainMap at 0x7fd10a013ee0>,\n",
       " 'cm_aligned': <CoDIAC.contactMap.chainMap at 0x7fd108c29e20>}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict_of_lig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm_aligned = dict_of_lig['cm_aligned']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'PDB_ID': '3TL0',\n",
       " 'entity': 2,\n",
       " 'aaRes_dict': {},\n",
       " 'arr': array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "        [0., 0., 1., 1., 0., 0., 0., 0., 0., 0.],\n",
       "        [0., 1., 0., 1., 0., 0., 0., 0., 0., 0.],\n",
       "        [0., 1., 1., 0., 1., 0., 0., 0., 0., 0.],\n",
       "        [0., 0., 0., 1., 0., 1., 1., 0., 0., 0.],\n",
       "        [0., 0., 0., 0., 1., 0., 1., 0., 0., 0.],\n",
       "        [0., 0., 0., 0., 1., 1., 0., 1., 0., 0.],\n",
       "        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
       "        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]),\n",
       " 'transDict': {4: 'PTR'},\n",
       " 'structSeq': 'RLNYAQLWHR',\n",
       " 'resNums': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n",
       " 'adjacencyDict': {2: {3: 1, 4: 1},\n",
       "  3: {4: 1},\n",
       "  4: {5: 1},\n",
       "  5: {6: 1, 7: 1},\n",
       "  6: {7: 1},\n",
       "  7: {8: 1}},\n",
       " 'unmodeled_list': [1, 1, 8, 10],\n",
       " 'match': True,\n",
       " 'offset': 198,\n",
       " 'ERROR_CODE': 0,\n",
       " 'refseq': 'RLNYAQLWHR'}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm_aligned.__dict__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 3: Select the ligand length by specifying no of residues N and C terminal of PTM of interest ('y'-pTyr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "PTM='PTR'\n",
    "for res in cm_aligned.transDict:\n",
    "    if res in cm_aligned.resNums:\n",
    "        if PTM in cm_aligned.transDict[res]: \n",
    "            res_start, res_end, aligned_str, tick_labels = pTyr_helpers.return_pos_of_interest(\n",
    "                cm_aligned.resNums, cm_aligned.structSeq, res, n_term_num=5, c_term_num=5, PTR_value = 'y')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1,\n",
       " 9,\n",
       " '--RLNyAQLWH',\n",
       " ['R-3', 'L-2', 'N-1', 'y0', 'A1', 'Q2', 'L3', 'W4', 'H5', 'R10'])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_start, res_end, aligned_str, tick_labels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 4: Generate contacts between two single entity dictionaries with contactmaps (domains and ligands on different entities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "adjList, arr = cm.return_interChain_adj(PATH, dict_of_lig, dict_of_SH2) #outer dict keys for ligand residues - ligand to domain contacts\n",
    "adjList_alt, arr_alt = cm.return_interChain_adj(PATH, dict_of_SH2, dict_of_lig) #outer dict keys for SH2 domain - domain to ligand contacts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{2: {14: 1, 17: 1},\n",
       " 4: {32: 1, 34: 1, 35: 1, 36: 1, 42: 1, 53: 1, 55: 1},\n",
       " 3: {52: 1, 53: 1},\n",
       " 5: {52: 1, 53: 1, 54: 1, 90: 1, 96: 1},\n",
       " 7: {54: 1, 65: 1, 88: 1, 89: 1, 90: 1, 96: 1},\n",
       " 8: {89: 1},\n",
       " 6: {90: 1, 91: 1}}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adjList"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fetching start and end residue positions of domains and ligands\n",
    "domains = dict_of_SH2['pdb_class'].domains\n",
    "SH2_start = int(domains[0]['SH2'][0])\n",
    "SH2_stop = int(domains[0]['SH2'][1])\n",
    "arr_sub, list_aa_from_sub, list_to_aa_sub = cm.return_arr_subset_by_ROI(arr, \n",
    "                                                                 res_start, res_end, dict_of_lig['cm_aligned'].return_min_residue(), \n",
    "                                                                 SH2_start, SH2_stop, dict_of_SH2['cm_aligned'].return_min_residue())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 102)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SH2_start, SH2_stop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### STEP 5: Generate fasta/feature files for jalview visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#SH2 domain-centric contacts\n",
    "fasta_header = 'Q06124|PTPN11|1|4|102|lig_4'\n",
    "PTM_file = './Data/Feature_Fasta_files/SH2_ligand_3TL0_test'\n",
    "cm.print_fasta_feature_files(arr_alt, dict_of_SH2['cm_aligned'].refseq, \n",
    "                                                            SH2_start,0, SH2_stop, -1,dict_of_SH2['cm_aligned'].return_min_residue(), \n",
    "                                                            res_start,0, res_end, -1,dict_of_lig['cm_aligned'].return_min_residue(),\n",
    "                                                            fasta_header,'pTyr', PTM_file, threshold=1, append=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pTyr ligand-centric contacts\n",
    "SH2_file = './Data/Feature_Fasta_files/pTyr_3TL0_test'\n",
    "cm.print_fasta_feature_files(arr, dict_of_lig['cm_aligned'].structSeq, \n",
    "                                                                 res_start, 0,res_end, -1,dict_of_lig['cm_aligned'].return_min_residue(), \n",
    "                                                                 SH2_start,0, SH2_stop, -1,dict_of_SH2['cm_aligned'].return_min_residue(),\n",
    "                                                                fasta_header,'SH2', SH2_file, threshold=1, append=True )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "vscode": {
   "interpreter": {
    "hash": "2a5df1d682f59c19b425f9416e0b416f0255e8e8bddb5f1ee316b16ab3529d09"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
